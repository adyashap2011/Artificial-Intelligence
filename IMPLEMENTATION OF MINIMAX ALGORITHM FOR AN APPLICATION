import math
  
def minimax (curDepth, nodeIndex,maxTurn, scores,targetDepth):

    # base case : targetDepth reached
    if (curDepth == targetDepth): 
        return scores[nodeIndex]
      
    if (maxTurn):
        x= minimax(curDepth + 1, nodeIndex * 2,False, scores, targetDepth)
        y=minimax(curDepth + 1, nodeIndex * 2 + 1,False, scores, targetDepth)
        m=max(x,y)
        print("max of ",x," & ",y,":",m)
        return m
      
    else:
        x=minimax(curDepth + 1, nodeIndex * 2,True, scores, targetDepth)
        y= minimax(curDepth + 1, nodeIndex * 2 + 1,True, scores, targetDepth)
        m=min(x,y)
        print("min of ",x," & ",y,":",m)
        return m
      
# Driver code
#scores = [5, 6, 7, 4, 3, 6, 2, 9]
scores = [5, 6, 7, 4]
  
treeDepth = math.log(len(scores), 2)
n=(minimax(0, 0, True, scores, treeDepth))  
print("The optimal value is : ",n, end = "")

