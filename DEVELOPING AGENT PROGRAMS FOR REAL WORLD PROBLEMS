from sys import maxsize
from itertools import permutations
V = 4
def travellingSalesmanProblem(graph, s):
    print("State Space:\n")
    vertex = []
    for i in range(V):
        if i != s:
            vertex.append(i)
    min_path = maxsize
    next_permutation = permutations(vertex)
    for i in next_permutation:
        current_pathweight = 0
        print(s + 1, "->", end="")
        k = s
        for j in i:
            current_pathweight += graph[k][j]
            print(j + 1, "->", end="")
            k = j
        print(s + 1)
        current_pathweight += graph[k][s]
        print("Current Cost:", current_pathweight)
        print("\n")
        min_path = min(min_path, current_pathweight)
    return min_path

if __name__ == "__main__":
    graph = [[0, 20, 42, 35], [20, 0, 30, 34],[42, 30, 0, 12], [35, 34, 12, 0]]
    s = 0
    print("Optimal Solution(Minimum Cost):", travellingSalesmanProblem(graph, s))

