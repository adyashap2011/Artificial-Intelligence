from queue import PriorityQueue
v = 6
graph = [[] for i in range(v)]
def best_first_search(source, target, n):
	visited = [0] * n
	visited[0]= True
	pq = PriorityQueue()
	pq.put((0, source))
	while pq.empty() == False:
		u = pq.get()[1]
		# Displaying the path having lowest cost
		print(u, end=" -> ")
		if u == target:
			break

		for v, c in graph[u]:
			if visited[v] == False:
				visited[v] = True
				pq.put((c, v))
	

# Function for adding edges to graph


def addedge(x, y, cost):
	graph[x].append((y, cost))
	graph[y].append((x, cost))


# The nodes shown in above example(by alphabets) are
# implemented using integers addedge(x,y,cost);
addedge(0, 1, 3)
addedge(0, 2, 4)
addedge(0, 3, 7)
addedge(1, 4, 2)
addedge(1, 2, 4)
addedge(2, 3, 2)
addedge(2, 4, 6)
addedge(2, 5, 8)
addedge(4, 5, 7)
addedge(3, 5, 5)

source = 0
target = 3
best_first_search(source, target, v)


